{"ast":null,"code":"var _jsxFileName = \"/Users/Laure/Desktop/React/to-do-list/src/components/App.js\";\nimport React from 'react';\nimport NavBar from './NavBar';\nimport ToDoList from './ToDoList';\nimport AddTask from './AddTask';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport initialData from '../initialData';\nimport uniqueid from 'uniqueid';\nimport Fetching from './Fetching';\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      tasks: [],\n      fetching: true\n    };\n\n    this.componentDidMount = () => {\n      let delay = Math.floor(Math.random() * 5000);\n      setTimeout(() => {\n        this.setState({\n          fetching: false,\n          tasks: initialData\n        });\n      }, delay);\n    };\n\n    this.onToggleCompleted = taskId => {\n      let taskToUpdate = this.state.tasks.find(task => task.id === taskId);\n      taskToUpdate.completed = !taskToUpdate.completed;\n      this.setState(prevState => prevState.tasks.map(task => {\n        return task.id === taskId ? taskToUpdate : task;\n      }));\n    };\n\n    this.onAddTask = newTaskName => {\n      let newTask = {\n        id: uniqueid(),\n        name: newTaskName,\n        completed: false\n      };\n      this.setState(prevState => ({\n        tasks: [...prevState.tasks, newTask]\n      }));\n    };\n\n    this.onDeleteCompleted = () => {\n      this.setState(prevState => {\n        let newState = prevState.tasks.filter(task => !task.completed);\n        return {\n          tasks: newState\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      id: \"todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, this.state.fetching ? /*#__PURE__*/React.createElement(Fetching, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 39\n      }\n    }) : null, /*#__PURE__*/React.createElement(BrowserRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/add-task\",\n      render: props => /*#__PURE__*/React.createElement(AddTask, Object.assign({}, props, {\n        onAddTask: this.onAddTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 68\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/:filter?\",\n      render: props => /*#__PURE__*/React.createElement(ToDoList, Object.assign({}, props, {\n        tasks: this.state.tasks,\n        onToggleCompleted: this.onToggleCompleted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 68\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(NavBar, {\n      onDeleteCompleted: this.onDeleteCompleted,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Laure/Desktop/React/to-do-list/src/components/App.js"],"names":["React","NavBar","ToDoList","AddTask","BrowserRouter","Switch","Route","initialData","uniqueid","Fetching","App","Component","state","tasks","fetching","componentDidMount","delay","Math","floor","random","setTimeout","setState","onToggleCompleted","taskId","taskToUpdate","find","task","id","completed","prevState","map","onAddTask","newTaskName","newTask","name","onDeleteCompleted","newState","filter","render","props"],"mappings":"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","sourcesContent":["import React from 'react'\nimport NavBar from './NavBar'\nimport ToDoList from './ToDoList'\nimport AddTask from './AddTask'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport initialData from '../initialData'\nimport uniqueid from 'uniqueid'\nimport Fetching from './Fetching'\n\nclass App extends React.Component{\n\n    state = {\n        tasks: [],\n        fetching: true\n    }\n    componentDidMount = () => {\n        let delay = Math.floor(Math.random() * 5000)\n        setTimeout(() => {\n          this.setState({\n            fetching: false,\n            tasks : initialData\n          })\n        }, delay)\n      }\n\n    onToggleCompleted = (taskId) => {\n        let taskToUpdate = this.state.tasks.find(task => task.id === taskId)\n        taskToUpdate.completed = !taskToUpdate.completed\n\n        this.setState(prevState => (\n            prevState.tasks.map(task => {\n                return task.id === taskId ?  taskToUpdate : task\n            })\n        ))\n    }\n\n    onAddTask = (newTaskName) => {\n        let newTask = {\n            id: uniqueid(),\n            name: newTaskName,\n            completed: false\n        }\n\n        this.setState(prevState => ({\n            tasks: [...prevState.tasks, newTask]\n        }))\n    }\n\n    onDeleteCompleted = () => {\n        this.setState(prevState => {\n            let newState = prevState.tasks.filter(task => !task.completed)\n            return {\n                tasks: newState\n            }\n        })\n    }\n\n    render(){\n        return(\n            <section id=\"todo\">\n                {this.state.fetching? <Fetching /> : null}\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/add-task\" render={(props) => <AddTask {...props} onAddTask={this.onAddTask} />} />\n                        <Route path=\"/:filter?\" render={(props) => <ToDoList {...props} tasks={this.state.tasks} onToggleCompleted={this.onToggleCompleted} />} />\n                    </Switch>\n                    <NavBar onDeleteCompleted={this.onDeleteCompleted} />\n                </BrowserRouter>\n            </section>\n        )\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}